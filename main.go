package main

import (
	"image/color"
	"math/rand"
	"os"
	"time"

	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/inpututil"
)

const TILE_SIZE = 30
const TILES_WIDE = 35
const TILES_HIGH = 35

var colors = []color.RGBA{
	color.RGBA{0x07, 0x07, 0x07, 0xff},
	color.RGBA{0x1F, 0x07, 0x07, 0xff},
	color.RGBA{0x2F, 0x0F, 0x07, 0xff},
	color.RGBA{0x47, 0x0F, 0x07, 0xff},
	color.RGBA{0x57, 0x17, 0x07, 0xff},
	color.RGBA{0x67, 0x1F, 0x07, 0xff},
	color.RGBA{0x77, 0x1F, 0x07, 0xff},
	color.RGBA{0x8F, 0x27, 0x07, 0xff},
	color.RGBA{0x9F, 0x2F, 0x07, 0xff},
	color.RGBA{0xAF, 0x3F, 0x07, 0xff},
	color.RGBA{0xBF, 0x47, 0x07, 0xff},
	color.RGBA{0xC7, 0x47, 0x07, 0xff},
	color.RGBA{0xDF, 0x4F, 0x07, 0xff},
	color.RGBA{0xDF, 0x57, 0x07, 0xff},
	color.RGBA{0xDF, 0x57, 0x07, 0xff},
	color.RGBA{0xD7, 0x5F, 0x07, 0xff},
	color.RGBA{0xD7, 0x5F, 0x07, 0xff},
	color.RGBA{0xD7, 0x67, 0x0F, 0xff},
	color.RGBA{0xCF, 0x6F, 0x0F, 0xff},
	color.RGBA{0xCF, 0x77, 0x0F, 0xff},
	color.RGBA{0xCF, 0x7F, 0x0F, 0xff},
	color.RGBA{0xCF, 0x87, 0x17, 0xff},
	color.RGBA{0xC7, 0x87, 0x17, 0xff},
	color.RGBA{0xC7, 0x8F, 0x17, 0xff},
	color.RGBA{0xC7, 0x97, 0x1F, 0xff},
	color.RGBA{0xBF, 0x9F, 0x1F, 0xff},
	color.RGBA{0xBF, 0x9F, 0x1F, 0xff},
	color.RGBA{0xBF, 0xA7, 0x27, 0xff},
	color.RGBA{0xBF, 0xA7, 0x27, 0xff},
	color.RGBA{0xBF, 0xAF, 0x2F, 0xff},
	color.RGBA{0xB7, 0xAF, 0x2F, 0xff},
	color.RGBA{0xB7, 0xB7, 0x2F, 0xff},
	color.RGBA{0xB7, 0xB7, 0x37, 0xff},
	color.RGBA{0xCF, 0xCF, 0x6F, 0xff},
	color.RGBA{0xDF, 0xDF, 0x9F, 0xff},
	color.RGBA{0xEF, 0xEF, 0xC7, 0xff},
	color.RGBA{0xFF, 0xFF, 0xFF, 0xff},
}

type Game struct {
	tileImg *ebiten.Image
}

func NewGame() *Game {
	tileImg := ebiten.NewImage(TILE_SIZE, TILE_SIZE)
	return &Game{
		tileImg: tileImg,
	}
}

func (game *Game) Update() error {
	if inpututil.IsKeyJustPressed(ebiten.KeyQ) {
		os.Exit(0)
	}
	return nil
}

func (game *Game) Draw(screen *ebiten.Image) {
	screen.Fill(color.RGBA{0xff, 0xff, 0xff, 0xff})
	color := 0
	for y := 0; y < TILES_HIGH-1; y++ {
		if color > len(colors) {
			color = 0
		}
		color += 1
		for x := 0; x <= TILES_WIDE; x++ {
			img := game.tileImg
			rng := rand.Intn(100)
			if rng > 10 && rng < 20 {
				img.Fill(colors[color+1])
			} else if rng > 20 {
				img.Fill(colors[color+2])
			} else {
				img.Fill(colors[color])
			}
			opts := &ebiten.DrawImageOptions{}
			opts.GeoM.Translate(float64(x*TILE_SIZE), float64(y*TILE_SIZE))
			screen.DrawImage(img, opts)
		}
	}
}

func (game *Game) Layout(w, h int) (int, int) {
	return TILE_SIZE * TILES_WIDE, TILE_SIZE * TILES_HIGH
}

func main() {
	rand.Seed(time.Now().UnixNano())
	ebiten.SetWindowTitle("Ebiten Test Game")
	ebiten.SetWindowSize(TILE_SIZE*TILES_WIDE, TILE_SIZE*TILES_HIGH)
	ebiten.SetWindowResizable(true)
	game := NewGame()
	ebiten.RunGame(game)

}
